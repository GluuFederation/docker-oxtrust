#! /usr/bin/python2
# -*- coding: utf-8-unix -*-

# Checks waits for the following to happen before moving on to the
# passed command:
#
# - Consul is up and populated
# - LDAP is up and populated
# - oxAuth ODIC endpoint is up
#
# author: torstein@escenic.com

import base64
import ldap3
import logging as log
import os
import pyDes
import requests
import sys
import time

from gluu_config import ConfigManager

GLUU_LDAP_URL = os.environ.get("GLUU_LDAP_URL", "ldap:1636")
GLUU_OXAUTH_BACKEND = os.environ.get("GLUU_OXAUTH_BACKEND", "localhost:8081")

MAX_WAIT_SECONDS = 300
SLEEP_DURATION = 3
LAST_CONFIG_KEY = "oxauth_openid_jwks_fn"


def wait_for_config(config_manager):
    for i in range(0, MAX_WAIT_SECONDS, SLEEP_DURATION):
        try:
            if config_manager.get(LAST_CONFIG_KEY):
                log.info("Config backend is ready.")
                return
        except Exception as exc:
            log.warn(exc)
            log.warn(
                "Config backend is not ready, retrying in {} seconds.".format(
                    SLEEP_DURATION))
        time.sleep(SLEEP_DURATION)

    log.error("Config backend is not ready after {} seconds.".format(MAX_WAIT_SECONDS))
    sys.exit(1)


def get_ldap_password(config_manager):
    encoded_password = config_manager.get("encoded_ox_ldap_pw")
    encoded_salt = config_manager.get("encoded_salt")
    cipher = pyDes.triple_des(
        b"{}".format(encoded_salt),
        pyDes.ECB,
        padmode=pyDes.PAD_PKCS5
    )
    encrypted_text = b"{}".format(base64.b64decode(encoded_password))
    return cipher.decrypt(encrypted_text)


def wait_for_ldap(config_manager):
    ldap_bind_dn = config_manager.get("ldap_binddn")
    ldap_password = get_ldap_password(config_manager)

    ldap_host = GLUU_LDAP_URL.split(":")[0]
    ldap_port = int(GLUU_LDAP_URL.split(":")[1])

    ldap_server = ldap3.Server(
        ldap_host,
        ldap_port,
        use_ssl=True
    )
    log.debug(
        "LDAP trying ldaps://" + str(GLUU_LDAP_URL) +
        " ldap_bind_dn=" + ldap_bind_dn
    )

    for i in range(0, MAX_WAIT_SECONDS, SLEEP_DURATION):
        try:
            with ldap3.Connection(
                    ldap_server,
                    ldap_bind_dn,
                    ldap_password) as ldap_connection:

                ldap_connection.search(
                    search_base="o=gluu",
                    search_filter="(oxScopeType=openid)",
                    search_scope=ldap3.SUBTREE,
                    attributes=['*']
                )

                if ldap_connection.entries:
                    log.info("LDAP is up and populated :-)")
                    return 0

        except Exception as e:
            log.debug(
                "LDAP not yet initialised: " + str(e) + ", " +
                "sleeping " + str(i) + "/" + str(MAX_WAIT_SECONDS)
            )
        log.debug(
            "LDAP not yet initialised: " +
            "sleeping " + str(i) + "/" + str(MAX_WAIT_SECONDS)
        )
        time.sleep(SLEEP_DURATION)

    log.error("LDAP not ready, after " + str(MAX_WAIT_SECONDS) + " seconds.")
    sys.exit(1)


def wait_for_oxauth():
    url = "http://" + GLUU_OXAUTH_BACKEND + "/oxauth/.well-known/openid-configuration"
    sleep_duration = 5
    log.debug("Waiting for oxAuth to be up URL= " + url)
    for i in range(0, MAX_WAIT_SECONDS, sleep_duration):
        try:
            r = requests.get(url)
            if r.status_code == 200:
                log.info("oxAuth is up :-)")
                return 0
            else:
                log.debug(
                    "oxAuth URL=" + url + " is not up yet " +
                    str(i) + "/" + str(MAX_WAIT_SECONDS)
                )

        except Exception:
            log.debug(
                "oxAuth URL=" + url + " is not up yet error=" +
                " " + str(i) + "/" + str(MAX_WAIT_SECONDS)
            )

        time.sleep(sleep_duration)

    log.error("oxAuth not ready, after " + str(MAX_WAIT_SECONDS) + " seconds.")
    sys.exit(1)


def execute_passed_command(command_list):
    log.info(
        "Now executing the arguments passed to " +
        sys.argv[0] +
        ": " +
        " ".join(command_list)
    )
    os.system(" ".join(command_list))


def configure_logger():
    # When debugging wait-for-it, set level=log.INFO or pass
    # --log=DEBUG on the command line.
    log.basicConfig(
        level=log.INFO,
        format='%(asctime)s [%(levelname)s] [%(filename)s] - %(message)s'
    )


if __name__ == "__main__":
    configure_logger()

    log.info(
        "Hi world, waiting for config backend, LDAP & oxAuth to be ready before " +
        "running " + " ".join(sys.argv[1:])
    )
    config_manager = ConfigManager()
    wait_for_config(config_manager)
    wait_for_ldap(config_manager)
    wait_for_oxauth()
    execute_passed_command(sys.argv[1:])
